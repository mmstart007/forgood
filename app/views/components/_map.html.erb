<script>

  var geoJson = <%= raw(@geojson.to_json) %>;
  var markers = geoJson;

  var framesPerSecond = 15;
  var initialOpacity = 1
  var opacity = initialOpacity;
  var initialRadius = 8;
  var radius = initialRadius;
  var maxRadius = 18;

  mapboxgl.accessToken = '<%= ENV['MAPBOXGL_TOKEN'] %>';

  function getCookie(cname) {
      var name = cname + "=";
      var ca = document.cookie.split(';');
      for(var i = 0; i <ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0)==' ') {
              c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
              return c.substring(name.length,c.length);
          }
      }
      return "";
  }

  var coordinates = getCookie("coordinates").split('&');
  var lat = coordinates[0];
  var lng = coordinates[1];

  if (lat == null || lng == null || (<%= current_user.present? && (current_user.email == "allan.floury@gmail.com")%>)) {
     mapCenter = [-0.57918, 44.837789];
     lat = 44.837789;
     lng = -0.57918;
  } else {
    mapCenter = [lng, lat];
  }

  var map = new mapboxgl.Map({
    container: 'map-dashboard',
    style: 'mapbox://styles/fredpetris/cikporvjj00p8b5lwovwd3kq9',
    center: mapCenter,
    zoom: 12
  });

  if (<%= device_type == :desktop %>) {
    // Add zoom controls to the map.
    map.addControl(new mapboxgl.Navigation({position: 'bottom-left'}));
    // hidden button map rotation
    // $('.mapboxgl-ctrl-compass').addClass('hidden');
  }

  var layers = [];

  map.on('style.load', function () {

    // Add marker data as a new GeoJSON source.
    map.addSource("markers", {
      "type": "geojson",
      "data": geoJson
    });

    markers.features.forEach(function(feature) {
      var symbol = feature.properties['marker-symbol'];
      var layerID = 'layer-' + symbol;

      // Add a layer for this symbol type if it hasn't been added already.
      if (!map.getLayer(layerID)) {
        // Add layerID in Layers Array
        layers.push(layerID);
        // Add Layer
        map.addLayer({
          "id": layerID,
          "type": "symbol",
          "source": "markers",
          "interactive": true,
          "layout": {
            "icon-image": symbol,
            "icon-offset": [0,-20],
            "icon-allow-overlap": true
          },
          "filter": ["==", "marker-symbol", symbol]
        });
        // Layer with flash perk are not visible at first
        if (layerID.includes("-flash")) {
          map.setLayoutProperty(layerID, 'visibility', 'none');
        }
      }
    });

    // Add a source and layer displaying a point which will be animated in a circle.
    map.addSource('point', {
      "type": "geojson",
      "data": {
        "type": "Point",
        "coordinates": [
          lng, lat
        ]
      }
    });

    map.addLayer({
      "id": "point",
      "source": "point",
      "type": "circle",
      "paint": {
        "circle-radius": initialRadius,
        "circle-radius-transition": {duration: 0},
        "circle-opacity-transition": {duration: 0},
        "circle-color": "#32C4CB"
      }
    });

    map.addLayer({
      "id": "point1",
      "source": "point",
      "type": "circle",
      "paint": {
        "circle-radius": initialRadius,
        "circle-color": "#32C4CB"
      }
    });


    function animateMarker(timestamp) {
        setTimeout(function(){
            requestAnimationFrame(animateMarker);

            radius += (maxRadius - radius) / framesPerSecond;
            opacity -= ( .9 / framesPerSecond );

            if (opacity <= 0) {
                radius = initialRadius;
                opacity = initialOpacity;
            }

            map.setPaintProperty('point', 'circle-radius', radius);
            map.setPaintProperty('point', 'circle-opacity', opacity);

        }, 1000 / framesPerSecond);

    }

    // Start the animation.
    animateMarker(0);
  });

  // When a click event occurs near a marker icon, open a popup at the location of
  // the feature, with description HTML from its properties.
  // map.on('click', function (e) {

  map.on('click', function (e) {

    var features = map.queryRenderedFeatures(e.point, { layers: layers });

    if (!features.length) {
        return;
    }

    var feature = features[0];

    // Get center the map on those coordinates
    if (<%= device_type == :mobile %>) {
      // Tranform geographical coordinates from the symbol in pixel coordinates
      var newCoordinates = map.project(features[0].geometry.coordinates);
      newCoordinates.y += 100;
      map.flyTo({center: map.unproject(newCoordinates)});
    }

    var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: true,
        anchor: "bottom"})
      .setLngLat(feature.geometry.coordinates)
      .setHTML(feature.properties.description)
      .addTo(map);

    // EVENT AMPLITUDE : USER_C_BUSINESS_MAP
    amplitude.logEvent('USER_C_BUSINESS_MAP');
  });

  // Use the same approach as above to indicate that the symbols are clickable
  // by changing the cursor style to 'pointer'.
  map.on('mousemove', function (e) {
    var features = map.queryRenderedFeatures(e.point, { layer: layers });
    map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';
  });

</script>
